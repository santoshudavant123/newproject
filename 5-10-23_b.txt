LOOPS in mysql-

Three types of loops-
1. While loop
2. Repeat until loop
3. Loop,leave,iterate loop

1. WHILE loop-

Syntax-
while expression do
statements;
end while;


To print values as -
1,2,3,4,5

delimiter $$

create procedure print_val(IN x int)

begin

declare str varchar(255);

set str=' ';

while x<=5 do

set str=concat(str,x,',');

set x=x+1;

end while;

select str;

end$$

call print_val(1);

2. REPEAT UNTIL loop-

syntax:

repeat 
statements;
until expression
end repeat;

delimiter ##
create procedure print_val1(IN x int,INOUT str varchar(255))
begin
repeat 
set str=concat(str,x,',');
set x=x+1;
until x > 5
end repeat;
select str;
end##

set @str=' ';
call print_val1(1,@str);
select @str;

3. LOOP,LEAVE,ITERATE loop-

syntax:

loop_label:LOOP
if condition then
leave loop_label;
end if;
if condition then
iterate loop_label;
else
statements;
end if;
end loop;

delimiter $$
create procedure print_val2(IN x int,INOUT str varchar(255))
begin
print1:loop
if x >5 then
leave print1;
end if;
if x<=5 then 
set str=concat(str,x,',');
set x=x+1;
iterate print1;
end if;
end loop;
select str;
end$$

set @str=' ';
call print_val2(1,@str);
select @str;


Write a procedure to display in this pattern 1,5,25,125,625,3125

delimiter $$

create procedure patt(IN num int)

begin

declare res varchar(50);

set res=' ';

set num=1;

while num < 4000 do

set res=concat(res,num,',');

set num=num*5;

end while;

select res;

end$$



call patt(5);


delimiter @@
create procedure patt1(IN num int)
begin 
declare res varchar(255);
set res=' ';
set num=1;
repeat
set res=concat(res,num,',');
set num=num*5;
until num > 4000;
end repeat;
select res;
end@@


delimiter ##
create procedure patt2(IN num int)
begin
declare res varchar(255);
set res=' ';
set num=1;
printval:loop
If num >4000 then
leave printval;
end if;
if num <=4000 then 
set res=concat(res, num,',');
set num=num*5;
iterate printval;
end if;
end loop;
end##

Q1. Write a procedure to create the patterns-

*
**
***
****
*****                


*****
****
***
**
*

For new line \n is used.


FUNCTIONS 

A stored function is a special kind of stored program which returns a value.
It helps in readability,reusability and maintainability of code.

A procedure can return one or more values.

Function syntax:

create  function functionname(paramter1,....parametern)
returns datatype [NOT] deterministic
begin
...
sql statements;
return statement;
end;

By default parameter MODE is IN.
DETERMINISTIC means function always returns same output.

Write a function to get grades according to salaries.

delimiter $$
create  function func1(v_empid int)
returns char deterministic
begin
declare grade char(2);
declare v_sal int;
select salary into v_sal from employees where employee_id=v_empid;
If v_sal<=5000 then
set grade='C';
elseif v_sal between 5001 and 10000 then
set grade='B';
elseif v_sal>10000 then 
set grade='A';
else
set grade='No grade';
end if;
return grade;
end$$

select *,func1(103) from employees where employee_id=103;


create  function func1(v_empid int)
returns char 
begin
declare grade char(20);
declare v_sal int;
select salary into v_sal from employees where employee_id=v_empid;
If v_sal<5000 then
set grade='C';
elseif v_sal between 5001 and 10000 then
set grade='B';
elseif v_sal>10000 then 
set grade='A';
ELSE
set grade='No grade';
end if;
return grade;
end
select employee_id,salary,func1(100) from employees where employee_id=100;


Write a function to display number of employees in a department.


delimiter &&
create  function func2(v_dept int)
returns int deterministic
begin
declare v_tot int;
select count(employee_id) into v_tot from employees where department_id=v_dept;
return v_tot;
end&&

select employee_id,last_name,salary,department_id from employees where department_id=func2(6);

select * ,func2(6) from employees where department_id=6;

To view information about functions:
show function status;

use information_schema;

show tables;

select * from routines;

nth highest salary 

LIMIT-SELECT 
    select_list
FROM
    table_name
LIMIT [offset,] row_count;
In this syntax:

The offset specifies the offset of the first row to return. The offset of the first row is 0, not 1.
The row_count specifies the maximum number of rows to return.


select distinct(salary) from table
order by salary desc limit n-1,1;

select * from employees where salary=(select distinct salary from employees
order by salary desc limit 2,1);




delimiter @@
create function odd(num int)
returns int deterministic
begin
declare v_odd int;
if mod(num,2)=0 then
set v_odd=0;
else 
set v_odd=1;
end if;
return v_odd;
end@@


